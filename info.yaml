--- 
# TinyTapeout project information
project:
  wokwi_id:    370086206206950401        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "José Valentín Restrepo"      # Your name
  tag:          "State Machines, controller"
  title:        "EVSE sequence follower"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  clock_hz:     "100 Hz for the ext-clock"
  description:  "This is a state machine that follows the step signals of a EVSE. SP: Esta es una maquina de estados que sigue la señal escalon de una estacion de carga."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This project simulates the control pilot signal of a EVSE. More info in: https://openev.freshdesk.com/support/solutions/articles/6000052074-basics-of-sae-j1772
      This signal has 6 states represented in a voltage level of a periodic signal. Only five of them are implemented here. Voltage convertion its also not implemented. 
      A state machine was build according to this specification.  The five states were numbered:
      000 State A
      001 State B
      011 State C
      110 State D 
      111 Error

      its only posible to go from state A to state B
      From state B, its posible to go to states A,C or D.
      From state C, its posible to go to states A,B or D
      From state D, its posible to go to states A,B or C

      if a wrong entry is detect in any state, the machine inmediately jumps to state Error.

      Inputs are in the form of (I4 I3 I2 I1) 1111,0111,0011,0001 which should represent the A,B,C,D conditions of the input signal in an EVSE (CP) (12, 9, 6 and 3). Other conditions are considered invalid signals.

      

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      1. Power UP. Put the signals I1,I2,I3,I4,I6,I8 in high.
      2. Reset (active low)
      3. State should be state A after reset. Idle indication is ON. 
      4. With I8 in High, reset I4. State should change to B. Idle indicator turns off, active indicator turns on. Station On is turned ON.
      5. Reset I8.
      6. Reset I3.
      7. Make a pulse with I8. State should change to state C. Charging is activated.
      8. Reset I2.
      9. Make a pulse with I8. Nothing changes, still charging.
      10. Set I2 and I3.
      11. Make a pulse with I8. Charging is off bit station still active.
      12. Set I4. Set I8. Cahrging is off. Stations is not active. station is IDLE.
      
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - I1 - LEVEL D
    - I2 - LEVEL C
    - I3 - LEVEL B
    - I4 - LEVEL A
    - none
    - I6 - EXT RESET
    - none
    - I8 - EXT 1kHz Clock
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a: Station ON
    - segment b: Vehicle Charging
    - segment c: State Variable bit - S2
    - segment d: State Variable bit - S1
    - segment e: State Variable bit - S0
    - segment f: N/A
    - segment g: Operating
    - dot: Idle
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
